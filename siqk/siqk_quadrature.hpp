#ifndef INCLUDE_SIQK_QUADRATURE_HPP
#define INCLUDE_SIQK_QUADRATURE_HPP

#include "siqk.hpp"

namespace siqk {
namespace quadrature {
#define SIQK_QUADRATURE_TRISYM_ORDER4_COORD                  \
  {0.108103018168070, 0.445948490915965, 0.445948490915965,  \
   0.445948490915965, 0.108103018168070, 0.445948490915965,  \
   0.445948490915965, 0.445948490915965, 0.108103018168070,  \
   0.816847572980458, 0.091576213509771, 0.091576213509771,  \
   0.091576213509771, 0.816847572980458, 0.091576213509771,  \
   0.091576213509771, 0.091576213509771, 0.816847572980458}
#define SIQK_QUADRATURE_TRISYM_ORDER4_WEIGHT                 \
  {0.223381589678011, 0.223381589678011, 0.223381589678011,  \
   0.109951743655322, 0.109951743655322, 0.109951743655322}

#define SIQK_QUADRATURE_TRISYM_ORDER8_COORD                  \
  {0.333333333333333, 0.333333333333333, 0.333333333333333,  \
   0.081414823414554, 0.459292588292723, 0.459292588292723,  \
   0.459292588292723, 0.081414823414554, 0.459292588292723,  \
   0.459292588292723, 0.459292588292723, 0.081414823414554,  \
   0.658861384496480, 0.170569307751760, 0.170569307751760,  \
   0.170569307751760, 0.658861384496480, 0.170569307751760,  \
   0.170569307751760, 0.170569307751760, 0.658861384496480,  \
   0.898905543365938, 0.050547228317031, 0.050547228317031,  \
   0.050547228317031, 0.898905543365938, 0.050547228317031,  \
   0.050547228317031, 0.050547228317031, 0.898905543365938,  \
   0.008394777409958, 0.263112829634638, 0.728492392955404,  \
   0.008394777409958, 0.728492392955404, 0.263112829634638,  \
   0.263112829634638, 0.008394777409958, 0.728492392955404,  \
   0.263112829634638, 0.728492392955404, 0.008394777409958,  \
   0.728492392955404, 0.263112829634638, 0.008394777409958,  \
   0.728492392955404, 0.008394777409958, 0.263112829634638}
#define SIQK_QUADRATURE_TRISYM_ORDER8_WEIGHT                 \
  {0.144315607677787, 0.095091634267285, 0.095091634267285,  \
   0.095091634267285, 0.103217370534718, 0.103217370534718,  \
   0.103217370534718, 0.032458497623198, 0.032458497623198,  \
   0.032458497623198, 0.027230314174435, 0.027230314174435,  \
   0.027230314174435, 0.027230314174435, 0.027230314174435,  \
   0.027230314174435}

namespace host {
static const Real trisym_order4_coord[] = SIQK_QUADRATURE_TRISYM_ORDER4_COORD;
static const Real trisym_order4_weight[] = SIQK_QUADRATURE_TRISYM_ORDER4_WEIGHT;
static const Real trisym_order8_coord[] = SIQK_QUADRATURE_TRISYM_ORDER8_COORD;
static const Real trisym_order8_weight[] = SIQK_QUADRATURE_TRISYM_ORDER8_WEIGHT;
}

namespace device {
KOKKOS_CONSTANT Real trisym_order4_coord[] = SIQK_QUADRATURE_TRISYM_ORDER4_COORD;
KOKKOS_CONSTANT Real trisym_order4_weight[] = SIQK_QUADRATURE_TRISYM_ORDER4_WEIGHT;
KOKKOS_CONSTANT Real trisym_order8_coord[] = SIQK_QUADRATURE_TRISYM_ORDER8_COORD;
KOKKOS_CONSTANT Real trisym_order8_weight[] = SIQK_QUADRATURE_TRISYM_ORDER8_WEIGHT;
}

template <typename ExeSpace>
KOKKOS_INLINE_FUNCTION
void get_coef (const int order, RawConstVec3s& coord, RawConstArray& weight) {
  switch (order) {
  case 4:
    coord = RawConstVec3s(device::trisym_order4_coord, 6, 3);
    weight = RawConstArray(device::trisym_order4_weight, 6);
    break;
  case 8:
    coord = RawConstVec3s(device::trisym_order8_coord, 16, 3);
    weight = RawConstArray(device::trisym_order8_weight, 16);
    break;
  }
}

template <>
KOKKOS_INLINE_FUNCTION
void get_coef<ko::HostSpace> (const int order, RawConstVec3s& coord,
                              RawConstArray& weight) {
  switch (order) {
  case 4:
    coord = RawConstVec3s(host::trisym_order4_coord, 6, 3);
    weight = RawConstArray(host::trisym_order4_weight, 6);
    break;
  case 8:
    coord = RawConstVec3s(host::trisym_order8_coord, 16, 3);
    weight = RawConstArray(host::trisym_order8_weight, 16);
    break;
  }
}
}
}

#endif
